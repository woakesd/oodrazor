@page "/weather"

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid Data="@forecasts" AllowMultiColumnSorting="true">
        <Columns>
            <RadzenDataGridColumn Property="@nameof(WeatherForecast.Date)" Title="Date" />
            <RadzenDataGridColumn Property="@nameof(WeatherForecast.TemperatureC)" Title="Temp. (C)" />
            <RadzenDataGridColumn Property="@nameof(WeatherForecast.TemperatureF)" Title="Temp. (F)" />
            <RadzenDataGridColumn Property="@nameof(WeatherForecast.Summary)" Title="Summary" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private IEnumerable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        });
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC * 1.8);
    }
}
